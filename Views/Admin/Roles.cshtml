@model List<IdentityRole>
@{
    ViewData["Title"] = "Roles Management";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<!-- Page Title -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="page-title">Roles Management</h1>
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="@Url.Action("Index", "Admin")">Admin</a></li>
                <li class="breadcrumb-item active" aria-current="page">Roles</li>
            </ol>
        </nav>
    </div>
    <div>
        <a href="@Url.Action("CreateRole")" class="btn btn-primary">
            <i class="bi bi-plus-circle me-2"></i>Create New Role
        </a>
    </div>
</div>

<!-- Statistics Cards -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="card">
            <div class="card-body text-center">
                <i class="bi bi-shield-check text-primary fs-2 mb-2"></i>
                <h4 class="card-title mb-0">@ViewBag.TotalCount</h4>
                <p class="card-text text-muted">Total Roles</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card">
            <div class="card-body text-center">
                <i class="bi bi-gear text-success fs-2 mb-2"></i>
                <h4 class="card-title mb-0">@Model.Count(r => new[] { "Admin", "Manager", "User", "Support" }.Contains(r.Name))</h4>
                <p class="card-text text-muted">System Roles</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card">
            <div class="card-body text-center">
                <i class="bi bi-plus-circle text-info fs-2 mb-2"></i>
                <h4 class="card-title mb-0">@Model.Count(r => !new[] { "Admin", "Manager", "User", "Support" }.Contains(r.Name))</h4>
                <p class="card-text text-muted">Custom Roles</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card">
            <div class="card-body text-center">
                <i class="bi bi-people text-warning fs-2 mb-2"></i>
                <h4 class="card-title mb-0">0</h4>
                <p class="card-text text-muted">Users Assigned</p>
            </div>
        </div>
    </div>
</div>

<!-- Search and Filters -->
<div class="card mb-4">
    <div class="card-body">
        <form method="get" id="filterForm">
            <div class="row g-3">
                <div class="col-md-6">
                    <label for="search" class="form-label">Search</label>
                    <input type="text" class="form-control" id="search" name="search" 
                           value="@ViewBag.Search" placeholder="Search by role name...">
                </div>
                <div class="col-md-3">
                    <label class="form-label">&nbsp;</label>
                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-outline-primary">
                            <i class="bi bi-funnel me-1"></i>Filter
                        </button>
                        <a href="@Url.Action("Roles")" class="btn btn-outline-secondary">
                            <i class="bi bi-x-circle me-1"></i>Clear
                        </a>
                    </div>
                </div>
                <div class="col-md-3">
                    <label class="form-label">&nbsp;</label>
                    <div>
                        <button type="button" class="btn btn-outline-success w-100" onclick="exportData()">
                            <i class="bi bi-download me-1"></i>Export
                        </button>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Roles Table -->
<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">System Roles</h5>
        <span class="badge bg-primary">Total: @ViewBag.TotalCount roles</span>
    </div>
    <div class="card-body p-0">
        @if (Model.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>Role Information</th>
                            <th>Type</th>
                            <th>Users Assigned</th>
                            <th>Permissions</th>
                            <th>Created Date</th>
                            <th class="text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var role in Model)
                        {
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center">
                                        @{
                                            var isSystemRole = new[] { "Admin", "Manager", "User", "Support" }.Contains(role.Name);
                                            var iconClass = role.Name switch
                                            {
                                                "Admin" => "bi-shield-fill-check text-danger",
                                                "Manager" => "bi-person-gear text-warning",
                                                "User" => "bi-person text-primary",
                                                "Support" => "bi-headset text-info",
                                                _ => "bi-shield text-secondary"
                                            };
                                        }
                                        <div class="avatar-sm bg-light border rounded-circle d-flex align-items-center justify-content-center me-3">
                                            <i class="bi @iconClass"></i>
                                        </div>
                                        <div>
                                            <h6 class="mb-1">@role.Name</h6>
                                            <small class="text-muted">ID: @role.Id</small>
                                            @if (isSystemRole)
                                            {
                                                <br><small class="badge bg-success">System Role</small>
                                            }
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    @if (isSystemRole)
                                    {
                                        <span class="badge bg-success">System</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-info">Custom</span>
                                    }
                                </td>
                                <td>
                                    <span class="badge bg-secondary">0 users</span>
                                    <br><small class="text-muted">
                                        <a href="@Url.Action("Users", new { role = role.Name })" class="text-decoration-none">
                                            View users
                                        </a>
                                    </small>
                                </td>
                                <td>
                                    @{
                                        var permissions = role.Name switch
                                        {
                                            "Admin" => new[] { "Full Access", "User Management", "System Settings", "Reports" },
                                            "Manager" => new[] { "User Management", "Reports", "Content Management" },
                                            "User" => new[] { "Profile Access", "Basic Features" },
                                            "Support" => new[] { "Help Queries", "User Support", "Reports" },
                                            _ => new[] { "Custom Permissions" }
                                        };
                                    }
                                    <div class="d-flex flex-wrap gap-1">
                                        @foreach (var permission in permissions.Take(2))
                                        {
                                            <small class="badge bg-light text-dark">@permission</small>
                                        }
                                        @if (permissions.Length > 2)
                                        {
                                            <small class="badge bg-light text-dark">+@(permissions.Length - 2) more</small>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <small class="text-muted">System Role</small>
                                </td>
                                <td class="text-end">
                                    <div class="btn-group" role="group">
                                        <a href="@Url.Action("EditRole", new { id = role.Id })" 
                                           class="btn btn-sm btn-outline-primary" title="Edit Role">
                                            <i class="bi bi-pencil"></i>
                                        </a>
                                        <a href="@Url.Action("Users", new { role = role.Name })" 
                                           class="btn btn-sm btn-outline-info" title="View Users">
                                            <i class="bi bi-people"></i>
                                        </a>
                                        @if (!isSystemRole)
                                        {
                                            <button type="button" class="btn btn-sm btn-outline-danger" 
                                                    onclick="deleteRole('@role.Id', '@role.Name')" title="Delete Role">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        }
                                        else
                                        {
                                            <button type="button" class="btn btn-sm btn-outline-secondary" 
                                                    disabled title="System role cannot be deleted">
                                                <i class="bi bi-lock"></i>
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="bi bi-shield text-muted" style="font-size: 3rem;"></i>
                <h5 class="mt-3 text-muted">No roles found</h5>
                <p class="text-muted">Try adjusting your search filters or create a new role.</p>
                <a href="@Url.Action("CreateRole")" class="btn btn-primary">
                    <i class="bi bi-plus-circle me-2"></i>Create First Role
                </a>
            </div>
        }
    </div>
</div>

<!-- Pagination -->
@if (ViewBag.TotalPages > 1)
{
    <nav aria-label="Roles pagination" class="mt-4">
        <ul class="pagination justify-content-center">
            @if (ViewBag.CurrentPage > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Roles", new { page = ViewBag.CurrentPage - 1, search = ViewBag.Search })">
                        <i class="bi bi-chevron-left"></i> Previous
                    </a>
                </li>
            }

            @for (int i = Math.Max(1, ViewBag.CurrentPage - 2); i <= Math.Min(ViewBag.TotalPages, ViewBag.CurrentPage + 2); i++)
            {
                <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                    <a class="page-link" href="@Url.Action("Roles", new { page = i, search = ViewBag.Search })">@i</a>
                </li>
            }

            @if (ViewBag.CurrentPage < ViewBag.TotalPages)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Roles", new { page = ViewBag.CurrentPage + 1, search = ViewBag.Search })">
                        Next <i class="bi bi-chevron-right"></i>
                    </a>
                </li>
            }
        </ul>
    </nav>
}

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-trash me-2"></i>Confirm Delete
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    <strong>Warning:</strong> This action cannot be undone.
                </div>
                <p>Are you sure you want to delete the role "<strong id="deleteRoleName"></strong>"?</p>
                <p class="text-muted">This will remove the role from the system. Users currently assigned to this role will lose these permissions.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">
                    <i class="bi bi-trash me-2"></i>Delete Role
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Role Information Modal -->
<div class="modal fade" id="roleInfoModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-info-circle me-2"></i>Role Information
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6 class="text-primary">System Roles</h6>
                        <div class="mb-3">
                            <strong>Admin:</strong> Full system access, can manage all users, settings, and data. Highest level of permissions.
                        </div>
                        <div class="mb-3">
                            <strong>Manager:</strong> Can manage users and content, generate reports, but limited system settings access.
                        </div>
                        <div class="mb-3">
                            <strong>Support:</strong> Can handle help queries, support users, and view reports. Limited administrative access.
                        </div>
                        <div class="mb-3">
                            <strong>User:</strong> Basic access to platform features, can manage own profile and use subscribed services.
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h6 class="text-info">Custom Roles</h6>
                        <p>Custom roles can be created to provide specific permission sets for different user groups. They can be modified or deleted as needed.</p>
                        
                        <h6 class="text-warning mt-3">Important Notes</h6>
                        <ul class="small">
                            <li>System roles cannot be deleted</li>
                            <li>Deleting a custom role will remove it from all assigned users</li>
                            <li>Users without roles will have minimal access</li>
                            <li>Changes take effect immediately</li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentRoleId = null;

        // Delete role
        function deleteRole(roleId, roleName) {
            currentRoleId = roleId;
            document.getElementById('deleteRoleName').textContent = roleName;
            
            const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
            modal.show();
        }

        // Confirm delete
        document.getElementById('confirmDelete').addEventListener('click', async function() {
            if (!currentRoleId) return;

            showLoading();
            try {
                const response = await fetch(`@Url.Action("DeleteRole")`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({ id: currentRoleId })
                });

                const result = await response.json();
                if (result.success) {
                    showAlert('success', result.message);
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showAlert('error', result.message || 'Failed to delete role');
                }
            } catch (error) {
                console.error('Error:', error);
                showAlert('error', 'An error occurred while deleting the role');
            } finally {
                hideLoading();
                bootstrap.Modal.getInstance(document.getElementById('deleteModal')).hide();
            }
        });

        // Export data
        function exportData() {
            const searchParams = new URLSearchParams(window.location.search);
            searchParams.set('export', 'true');
            window.open(`@Url.Action("Roles")?${searchParams.toString()}`, '_blank');
        }

        // Auto-submit search after typing
        let searchTimeout;
        document.getElementById('search').addEventListener('input', function() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                document.getElementById('filterForm').submit();
            }, 500);
        });

        // Show role information
        function showRoleInfo() {
            const modal = new bootstrap.Modal(document.getElementById('roleInfoModal'));
            modal.show();
        }

        // Show alert messages
        function showAlert(type, message) {
            const alertHtml = `
                <div class="alert alert-${type === 'error' ? 'danger' : 'success'} alert-dismissible fade show" role="alert">
                    <i class="bi bi-${type === 'error' ? 'exclamation-triangle' : 'check-circle'} me-2"></i>
                    <strong>${type === 'error' ? 'Error!' : 'Success!'}</strong> ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            // Insert at the top of the main content
            const mainContent = document.querySelector('main .admin-content');
            const firstChild = mainContent.firstElementChild;
            const alertDiv = document.createElement('div');
            alertDiv.innerHTML = alertHtml;
            mainContent.insertBefore(alertDiv.firstElementChild, firstChild);
        }

        // Add info button to header
        document.addEventListener('DOMContentLoaded', function() {
            const header = document.querySelector('.card-header h5');
            if (header) {
                const infoBtn = document.createElement('button');
                infoBtn.className = 'btn btn-sm btn-outline-info ms-2';
                infoBtn.type = 'button';
                infoBtn.onclick = showRoleInfo;
                infoBtn.innerHTML = '<i class="bi bi-info-circle"></i>';
                infoBtn.title = 'Role Information';
                header.appendChild(infoBtn);
            }
        });
    </script>
}

<style>
    .avatar-sm {
        width: 40px;
        height: 40px;
        font-size: 1rem;
    }
    
    .table th {
        font-weight: 600;
        color: #495057;
        border-top: none;
    }
    
    .btn-group .btn {
        border-radius: 0.375rem;
        margin-right: 2px;
    }
    
    .btn-group .btn:last-child {
        margin-right: 0;
    }
    
    .badge {
        font-size: 0.75rem;
    }
    
    .btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
</style>
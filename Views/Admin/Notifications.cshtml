@model NotificationManagementViewModel
@{
    ViewData["Title"] = "Notifications";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="page-title-box">
                <h4 class="page-title">
                    <i class="fas fa-bell me-2"></i>Notification Management
                </h4>
                <div class="page-title-right">
                    <ol class="breadcrumb m-0">
                        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Admin")">Admin</a></li>
                        <li class="breadcrumb-item active">Notifications</li>
                    </ol>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Send Broadcast Notification -->
        <div class="col-xl-6">
            <div class="card">
                <div class="card-body">
                    <h4 class="header-title mb-3">
                        <i class="fas fa-bullhorn me-2"></i>Send Broadcast Notification
                    </h4>
                    
                    <form id="broadcastForm">
                        <div class="mb-3">
                            <label for="notificationTitle" class="form-label">Title</label>
                            <input type="text" class="form-control" id="notificationTitle" placeholder="Enter notification title" required>
                        </div>
                        
                        <div class="mb-3">
                            <label for="notificationMessage" class="form-label">Message</label>
                            <textarea class="form-control" id="notificationMessage" rows="4" placeholder="Enter your message here..." required></textarea>
                        </div>
                        
                        <div class="mb-3">
                            <label for="notificationType" class="form-label">Type</label>
                            <select class="form-select" id="notificationType">
                                <option value="System">System</option>
                                <option value="Announcement">Announcement</option>
                                <option value="Maintenance">Maintenance</option>
                                <option value="Marketing">Marketing</option>
                                <option value="Update">Update</option>
                            </select>
                        </div>
                        
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-paper-plane me-2"></i>Send Broadcast
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Notification Settings -->
        <div class="col-xl-6">
            <div class="card">
                <div class="card-body">
                    <h4 class="header-title mb-3">
                        <i class="fas fa-cog me-2"></i>Notification Settings
                    </h4>
                    
                    <form id="settingsForm">
                        <div class="mb-3">
                            <h6 class="mb-2">Notification Channels</h6>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" id="emailNotifications" @(Model.NotificationSettings.EmailNotifications ? "checked" : "")>
                                <label class="form-check-label" for="emailNotifications">
                                    Email Notifications
                                </label>
                            </div>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" id="pushNotifications" @(Model.NotificationSettings.PushNotifications ? "checked" : "")>
                                <label class="form-check-label" for="pushNotifications">
                                    Push Notifications
                                </label>
                            </div>
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" id="smsNotifications" @(Model.NotificationSettings.SmsNotifications ? "checked" : "")>
                                <label class="form-check-label" for="smsNotifications">
                                    SMS Notifications
                                </label>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <h6 class="mb-2">Notification Types</h6>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" id="newUserNotifications" @(Model.NotificationSettings.NewUserNotifications ? "checked" : "")>
                                <label class="form-check-label" for="newUserNotifications">
                                    New User Registrations
                                </label>
                            </div>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" id="paymentNotifications" @(Model.NotificationSettings.PaymentNotifications ? "checked" : "")>
                                <label class="form-check-label" for="paymentNotifications">
                                    Payment Updates
                                </label>
                            </div>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" id="systemNotifications" @(Model.NotificationSettings.SystemNotifications ? "checked" : "")>
                                <label class="form-check-label" for="systemNotifications">
                                    System Alerts
                                </label>
                            </div>
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" id="marketingNotifications" @(Model.NotificationSettings.MarketingNotifications ? "checked" : "")>
                                <label class="form-check-label" for="marketingNotifications">
                                    Marketing Messages
                                </label>
                            </div>
                        </div>
                        
                        <div class="d-grid">
                            <button type="submit" class="btn btn-success">
                                <i class="fas fa-save me-2"></i>Save Settings
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Notifications -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h4 class="header-title mb-3">
                        <i class="fas fa-history me-2"></i>Recent Notifications
                    </h4>
                    
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead>
                                <tr>
                                    <th>Status</th>
                                    <th>Title</th>
                                    <th>Message</th>
                                    <th>Type</th>
                                    <th>Date</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var notification in Model.RecentNotifications)
                                {
                                    <tr class="@(notification.IsRead ? "" : "table-warning")">
                                        <td>
                                            @if (notification.IsRead)
                                            {
                                                <span class="badge bg-success">
                                                    <i class="fas fa-check"></i> Read
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-warning">
                                                    <i class="fas fa-exclamation"></i> Unread
                                                </span>
                                            }
                                        </td>
                                        <td>
                                            <strong>@notification.Title</strong>
                                        </td>
                                        <td>
                                            @notification.Message
                                        </td>
                                        <td>
                                            <span class="badge @GetTypeBadgeClass(notification.Type)">
                                                @notification.Type
                                            </span>
                                        </td>
                                        <td>
                                            <small class="text-muted">
                                                @notification.CreatedAt.ToString("MMM dd, yyyy HH:mm")
                                            </small>
                                        </td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                @if (!notification.IsRead)
                                                {
                                                    <button class="btn btn-sm btn-outline-primary" onclick="markAsRead(@notification.Id)">
                                                        <i class="fas fa-check"></i>
                                                    </button>
                                                }
                                                <button class="btn btn-sm btn-outline-danger" onclick="deleteNotification(@notification.Id)">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    
                    @if (!Model.RecentNotifications.Any())
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-bell-slash fa-3x text-muted mb-3"></i>
                            <p class="text-muted">No notifications found.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Back Button -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <a href="@Url.Action("Index", "Admin")" class="btn btn-secondary">
                        <i class="fas fa-arrow-left me-2"></i>Back to Dashboard
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    string GetTypeBadgeClass(string type)
    {
        return type.ToLower() switch
        {
            "system" => "bg-info",
            "user" => "bg-primary",
            "payment" => "bg-success",
            "subscription" => "bg-warning",
            "announcement" => "bg-primary",
            "maintenance" => "bg-warning",
            "marketing" => "bg-info",
            "update" => "bg-success",
            _ => "bg-secondary"
        };
    }
}

@section Scripts {
    <script>
        // Send Broadcast Notification
        document.getElementById('broadcastForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const title = document.getElementById('notificationTitle').value;
            const message = document.getElementById('notificationMessage').value;
            const type = document.getElementById('notificationType').value;
            
            if (!title || !message) {
                showAlert('error', 'Please fill in all required fields.');
                return;
            }
            
            // Show loading
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Sending...';
            submitBtn.disabled = true;
            
            // Simulate API call
            fetch('@Url.Action("SendBroadcastNotification", "Admin")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: `title=${encodeURIComponent(title)}&message=${encodeURIComponent(message)}&type=${encodeURIComponent(type)}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert('success', data.message || 'Notification sent successfully!');
                    document.getElementById('broadcastForm').reset();
                } else {
                    showAlert('error', data.message || 'Failed to send notification.');
                }
            })
            .catch(error => {
                showAlert('error', 'Error sending notification. Please try again.');
                console.error('Error:', error);
            })
            .finally(() => {
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            });
        });
        
        // Save Notification Settings
        document.getElementById('settingsForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const settings = {
                emailNotifications: document.getElementById('emailNotifications').checked,
                pushNotifications: document.getElementById('pushNotifications').checked,
                smsNotifications: document.getElementById('smsNotifications').checked,
                newUserNotifications: document.getElementById('newUserNotifications').checked,
                paymentNotifications: document.getElementById('paymentNotifications').checked,
                systemNotifications: document.getElementById('systemNotifications').checked,
                marketingNotifications: document.getElementById('marketingNotifications').checked
            };
            
            // Show loading
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Saving...';
            submitBtn.disabled = true;
            
            // Simulate API call
            fetch('@Url.Action("UpdateNotificationSettings", "Admin")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: JSON.stringify(settings)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert('success', data.message || 'Settings updated successfully!');
                } else {
                    showAlert('error', data.message || 'Failed to update settings.');
                }
            })
            .catch(error => {
                showAlert('error', 'Error updating settings. Please try again.');
                console.error('Error:', error);
            })
            .finally(() => {
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            });
        });
        
        // Mark notification as read
        function markAsRead(notificationId) {
            // Simulate marking as read
            const row = event.target.closest('tr');
            row.classList.remove('table-warning');
            
            const statusCell = row.querySelector('td:first-child');
            statusCell.innerHTML = '<span class="badge bg-success"><i class="fas fa-check"></i> Read</span>';
            
            // Remove the mark as read button
            const button = event.target.closest('button');
            button.remove();
            
            showAlert('success', 'Notification marked as read.');
        }
        
        // Delete notification
        function deleteNotification(notificationId) {
            if (confirm('Are you sure you want to delete this notification?')) {
                const row = event.target.closest('tr');
                row.style.transition = 'opacity 0.3s ease';
                row.style.opacity = '0';
                
                setTimeout(() => {
                    row.remove();
                    showAlert('success', 'Notification deleted successfully.');
                }, 300);
            }
        }
        
        // Show alert helper
        function showAlert(type, message) {
            const alertType = type === 'error' ? 'danger' : type;
            const icon = type === 'error' ? 'exclamation-circle' : 'check-circle';
            
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${alertType} alert-dismissible fade show modern-alert`;
            alertDiv.innerHTML = `
                <div class="d-flex align-items-center">
                    <div class="alert-icon me-3">
                        <i class="fas fa-${icon}"></i>
                    </div>
                    <div class="flex-grow-1">
                        <strong>${type === 'error' ? 'Error!' : 'Success!'}</strong> ${message}
                    </div>
                    <button type="button" class="btn-close" onclick="this.parentElement.parentElement.remove()"></button>
                </div>
            `;
            
            // Insert at the top of the container
            const container = document.querySelector('.container-fluid');
            container.insertBefore(alertDiv, container.firstChild);
            
            // Auto-remove after 5 seconds
            setTimeout(() => {
                if (alertDiv.parentElement) {
                    alertDiv.remove();
                }
            }, 5000);
        }
    </script>
}

<style>
    .page-title-box {
        padding: 20px 0;
        border-bottom: 1px solid #eee;
        margin-bottom: 30px;
    }

    .card {
        border: none;
        box-shadow: 0 0.75rem 1.5rem rgba(18, 38, 63, 0.03);
        margin-bottom: 24px;
        border-radius: 12px;
    }

    .card-body {
        padding: 1.5rem;
    }

    .header-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #495057;
        margin-bottom: 1rem;
    }

    .form-label {
        font-weight: 600;
        color: #495057;
        margin-bottom: 0.5rem;
    }

    .form-control, .form-select {
        border-radius: 8px;
        border: 2px solid #e9ecef;
        padding: 0.75rem 1rem;
        transition: all 0.3s ease;
    }

    .form-control:focus, .form-select:focus {
        border-color: #007bff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .form-check-input {
        width: 1.25em;
        height: 1.25em;
    }

    .btn {
        border-radius: 8px;
        font-weight: 600;
        padding: 0.75rem 1.5rem;
        transition: all 0.3s ease;
    }

    .btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .btn-sm {
        padding: 0.375rem 0.75rem;
        font-size: 0.875rem;
    }

    .table th {
        font-weight: 600;
        color: #495057;
        border-top: none;
        background-color: #f8f9fa;
    }

    .table-warning {
        background-color: rgba(255, 193, 7, 0.1) !important;
    }

    .breadcrumb {
        background: none;
        padding: 0;
        margin: 0;
    }

    .breadcrumb-item a {
        color: #6c757d;
        text-decoration: none;
    }

    .breadcrumb-item.active {
        color: #495057;
        font-weight: 600;
    }

    .badge {
        font-size: 0.75rem;
        padding: 0.25em 0.5em;
    }
</style>
@model PaymentHistory
@{
    ViewData["Title"] = "Payment Details";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<!-- Page Title -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="page-title">Payment Details</h1>
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="@Url.Action("Index", "Admin")">Admin</a></li>
                <li class="breadcrumb-item"><a href="@Url.Action("PaymentHistory")">Payment History</a></li>
                <li class="breadcrumb-item active" aria-current="page">#@Model.TransactionId</li>
            </ol>
        </nav>
    </div>
    <div>
        <button type="button" class="btn btn-outline-secondary" onclick="downloadReceipt(@Model.Id)">
            <i class="bi bi-download me-2"></i>Download Receipt
        </button>
        <a href="@Url.Action("PaymentHistory")" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left me-2"></i>Back to List
        </a>
    </div>
</div>

<!-- Payment Status Alert -->
@{
    var alertClass = Model.Status switch
    {
        PaymentStatus.Success => "alert-success",
        PaymentStatus.Failed => "alert-danger",
        PaymentStatus.Pending => "alert-warning",
        PaymentStatus.Refunded => "alert-info",
        PaymentStatus.Cancelled => "alert-secondary",
        _ => "alert-secondary"
    };
}

<div class="alert @alertClass" role="alert">
    <i class="bi bi-@(Model.Status == PaymentStatus.Success ? "check-circle" : Model.Status == PaymentStatus.Failed ? "x-circle" : "clock") me-2"></i>
    <strong>Payment Status: @Model.Status</strong>
    @if (Model.Status == PaymentStatus.Failed)
    {
        <span> - This transaction was not completed successfully.</span>
    }
    else if (Model.Status == PaymentStatus.Refunded)
    {
        <span> - This payment has been refunded to the customer.</span>
    }
    else if (Model.Status == PaymentStatus.Pending)
    {
        <span> - This payment is still being processed.</span>
    }
</div>

<div class="row">
    <!-- Payment Information -->
    <div class="col-lg-8">
        <!-- Transaction Details Card -->
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="bi bi-receipt me-2"></i>Transaction Details
                </h5>
                <span class="badge bg-@(Model.Status == PaymentStatus.Success ? "success" : Model.Status == PaymentStatus.Failed ? "danger" : "warning") fs-6">
                    @Model.Status
                </span>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label fw-bold">Transaction ID</label>
                            <p class="form-control-plaintext">
                                <code>#@Model.TransactionId</code>
                            </p>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label fw-bold">Payment Date</label>
                            <p class="form-control-plaintext">
                                <i class="bi bi-calendar me-1"></i>
                                @Model.PaymentDate.ToString("MMMM dd, yyyy 'at' hh:mm tt")
                            </p>
                        </div>
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(Model.RazorpayPaymentId))
                {
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label fw-bold">Razorpay Payment ID</label>
                                <p class="form-control-plaintext">
                                    <code>@Model.RazorpayPaymentId</code>
                                </p>
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(Model.RazorpayOrderId))
                        {
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Razorpay Order ID</label>
                                    <p class="form-control-plaintext">
                                        <code>@Model.RazorpayOrderId</code>
                                    </p>
                                </div>
                            </div>
                        }
                    </div>
                }

                @if (Model.Method.HasValue)
                {
                    <div class="mb-3">
                        <label class="form-label fw-bold">Payment Method</label>
                        <p class="form-control-plaintext">
                            <span class="badge bg-light text-dark">
                                <i class="bi bi-credit-card me-1"></i>@Model.Method
                            </span>
                        </p>
                    </div>
                }

                @if (!string.IsNullOrEmpty(Model.Notes))
                {
                    <div class="mb-3">
                        <label class="form-label fw-bold">Notes</label>
                        <p class="form-control-plaintext">@Model.Notes</p>
                    </div>
                }
            </div>
        </div>

        <!-- Customer Information Card -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="bi bi-person me-2"></i>Customer Information
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label fw-bold">Customer Name</label>
                            <p class="form-control-plaintext">
                                <a href="@Url.Action("UserDetails", new { id = Model.User.Id })" class="text-decoration-none">
                                    @Model.User.FirstName @Model.User.LastName
                                </a>
                            </p>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label fw-bold">Email Address</label>
                            <p class="form-control-plaintext">
                                <i class="bi bi-envelope me-1"></i>@Model.User.Email
                            </p>
                        </div>
                    </div>
                </div>

                @if (Model.Company != null)
                {
                    <div class="mb-3">
                        <label class="form-label fw-bold">Company</label>
                        <p class="form-control-plaintext">
                            <a href="@Url.Action("CompanyDetails", new { id = Model.Company.Id })" class="text-decoration-none">
                                <i class="bi bi-building me-1"></i>@Model.Company.Name
                            </a>
                        </p>
                    </div>
                }
            </div>
        </div>

        <!-- Subscription Details Card -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="bi bi-credit-card me-2"></i>Subscription Details
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label fw-bold">Service</label>
                            <p class="form-control-plaintext">
                                <a href="@Url.Action("ServiceDetails", new { id = Model.SubscriptionPlan.Service.Id })" class="text-decoration-none">
                                    @Model.SubscriptionPlan.Service.Name
                                </a>
                            </p>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label fw-bold">Subscription Plan</label>
                            <p class="form-control-plaintext">
                                <a href="@Url.Action("SubscriptionPlanDetails", new { id = Model.SubscriptionPlan.Id })" class="text-decoration-none">
                                    @Model.SubscriptionPlan.Name
                                </a>
                            </p>
                        </div>
                    </div>
                </div>

                @if (Model.SubscriptionStartDate.HasValue && Model.SubscriptionEndDate.HasValue)
                {
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label fw-bold">Subscription Start</label>
                                <p class="form-control-plaintext">
                                    <i class="bi bi-calendar-check me-1"></i>
                                    @Model.SubscriptionStartDate.Value.ToString("MMMM dd, yyyy")
                                </p>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label fw-bold">Subscription End</label>
                                <p class="form-control-plaintext">
                                    <i class="bi bi-calendar-x me-1"></i>
                                    @Model.SubscriptionEndDate.Value.ToString("MMMM dd, yyyy")
                                </p>
                            </div>
                        </div>
                    </div>
                }

                @if (Model.Offer != null)
                {
                    <div class="mb-3">
                        <label class="form-label fw-bold">Applied Offer</label>
                        <p class="form-control-plaintext">
                            <span class="badge bg-warning text-dark">
                                <i class="bi bi-tag me-1"></i>@Model.Offer.Name (@Model.Offer.Code)
                            </span>
                        </p>
                    </div>
                }
            </div>
        </div>

        <!-- Payment Gateway Response (if available) -->
        @if (!string.IsNullOrEmpty(Model.ResponseData))
        {
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="bi bi-code-slash me-2"></i>Gateway Response
                    </h5>
                </div>
                <div class="card-body">
                    <pre class="bg-light p-3 rounded"><code>@Model.ResponseData</code></pre>
                </div>
            </div>
        }
    </div>

    <!-- Sidebar -->
    <div class="col-lg-4">
        <!-- Payment Summary -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="bi bi-calculator me-2"></i>Payment Summary
                </h5>
            </div>
            <div class="card-body">
                <div class="d-flex justify-content-between mb-2">
                    <span>Plan Amount:</span>
                    <strong>$@Model.Amount.ToString("N2")</strong>
                </div>
                
                @if (Model.DiscountAmount.HasValue && Model.DiscountAmount > 0)
                {
                    <div class="d-flex justify-content-between mb-2 text-success">
                        <span>Discount:</span>
                        <strong>-$@Model.DiscountAmount.Value.ToString("N2")</strong>
                    </div>
                }
                
                <hr>
                <div class="d-flex justify-content-between">
                    <span class="fw-bold">Final Amount:</span>
                    <strong class="text-success fs-5">$@Model.FinalAmount.ToString("N2")</strong>
                </div>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="bi bi-lightning me-2"></i>Quick Actions
                </h5>
            </div>
            <div class="card-body">
                <div class="d-grid gap-2">
                    <button type="button" class="btn btn-outline-secondary" onclick="downloadReceipt(@Model.Id)">
                        <i class="bi bi-download me-2"></i>Download Receipt
                    </button>
                    
                    @if (Model.Status == PaymentStatus.Success)
                    {
                        <button type="button" class="btn btn-outline-warning" onclick="initiateRefund(@Model.Id, '@Model.TransactionId')">
                            <i class="bi bi-arrow-return-left me-2"></i>Initiate Refund
                        </button>
                    }
                    
                    <a href="@Url.Action("UserDetails", new { id = Model.User.Id })" class="btn btn-outline-info">
                        <i class="bi bi-person me-2"></i>View Customer
                    </a>
                    
                    @if (Model.Company != null)
                    {
                        <a href="@Url.Action("CompanyDetails", new { id = Model.Company.Id })" class="btn btn-outline-primary">
                            <i class="bi bi-building me-2"></i>View Company
                        </a>
                    }
                </div>
            </div>
        </div>

        <!-- Transaction Timeline -->
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="bi bi-clock-history me-2"></i>Transaction Timeline
                </h5>
            </div>
            <div class="card-body">
                <div class="timeline">
                    <div class="timeline-item">
                        <div class="timeline-marker bg-primary"></div>
                        <div class="timeline-content">
                            <h6 class="timeline-title">Transaction Created</h6>
                            <p class="timeline-description">@Model.CreatedAt.ToString("MMM dd, yyyy 'at' hh:mm tt")</p>
                        </div>
                    </div>
                    
                    <div class="timeline-item">
                        <div class="timeline-marker bg-@(Model.Status == PaymentStatus.Success ? "success" : Model.Status == PaymentStatus.Failed ? "danger" : "warning")"></div>
                        <div class="timeline-content">
                            <h6 class="timeline-title">Payment @Model.Status</h6>
                            <p class="timeline-description">@Model.PaymentDate.ToString("MMM dd, yyyy 'at' hh:mm tt")</p>
                        </div>
                    </div>
                    
                    @if (Model.UpdatedAt.HasValue && Model.UpdatedAt != Model.CreatedAt)
                    {
                        <div class="timeline-item">
                            <div class="timeline-marker bg-info"></div>
                            <div class="timeline-content">
                                <h6 class="timeline-title">Last Updated</h6>
                                <p class="timeline-description">@Model.UpdatedAt.Value.ToString("MMM dd, yyyy 'at' hh:mm tt")</p>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Refund Modal -->
<div class="modal fade" id="refundModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-arrow-return-left me-2"></i>Initiate Refund
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    <strong>Warning:</strong> This action will initiate a refund process for $@Model.FinalAmount.ToString("N2"). This cannot be undone.
                </div>
                <div class="mb-3">
                    <label for="refundReason" class="form-label">Refund Reason</label>
                    <textarea id="refundReason" class="form-control" rows="3" placeholder="Please provide a reason for the refund..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-warning" id="confirmRefund">
                    <i class="bi bi-arrow-return-left me-2"></i>Initiate Refund
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Initiate refund
        function initiateRefund(paymentId, transactionId) {
            document.getElementById('refundReason').value = '';
            const modal = new bootstrap.Modal(document.getElementById('refundModal'));
            modal.show();
        }

        // Confirm refund
        document.getElementById('confirmRefund').addEventListener('click', async function() {
            const reason = document.getElementById('refundReason').value.trim();
            
            if (!reason) {
                alert('Please provide a reason for the refund.');
                return;
            }

            showLoading();
            try {
                const response = await fetch(`@Url.Action("InitiateRefund")`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({ 
                        paymentId: @Model.Id, 
                        reason: reason 
                    })
                });

                const result = await response.json();
                if (result.success) {
                    showAlert('success', result.message);
                    setTimeout(() => location.reload(), 2000);
                } else {
                    showAlert('error', result.message || 'Failed to initiate refund');
                }
            } catch (error) {
                console.error('Error:', error);
                showAlert('error', 'An error occurred while initiating refund');
            } finally {
                hideLoading();
                bootstrap.Modal.getInstance(document.getElementById('refundModal')).hide();
            }
        });

        // Download receipt
        function downloadReceipt(paymentId) {
            window.open(`@Url.Action("DownloadReceipt")?paymentId=${paymentId}`, '_blank');
        }

        // Show alert messages
        function showAlert(type, message) {
            const alertHtml = `
                <div class="alert alert-${type === 'error' ? 'danger' : 'success'} alert-dismissible fade show" role="alert">
                    <i class="bi bi-${type === 'error' ? 'exclamation-triangle' : 'check-circle'} me-2"></i>
                    <strong>${type === 'error' ? 'Error!' : 'Success!'}</strong> ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            // Insert at the top of the main content
            const mainContent = document.querySelector('main .admin-content');
            const firstChild = mainContent.firstElementChild;
            const alertDiv = document.createElement('div');
            alertDiv.innerHTML = alertHtml;
            mainContent.insertBefore(alertDiv.firstElementChild, firstChild);
        }
    </script>
}

<style>
    .form-control-plaintext {
        padding-top: 0.375rem;
        padding-bottom: 0.375rem;
        margin-bottom: 0;
    }
    
    .timeline {
        position: relative;
        padding-left: 2rem;
    }
    
    .timeline::before {
        content: '';
        position: absolute;
        left: 10px;
        top: 0;
        bottom: 0;
        width: 2px;
        background: #dee2e6;
    }
    
    .timeline-item {
        position: relative;
        margin-bottom: 1.5rem;
    }
    
    .timeline-marker {
        position: absolute;
        left: -1.75rem;
        top: 0.25rem;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        border: 2px solid #fff;
        box-shadow: 0 0 0 2px var(--bs-border-color);
    }
    
    .timeline-content {
        padding-left: 1rem;
    }
    
    .timeline-title {
        margin-bottom: 0.25rem;
        font-size: 0.875rem;
        font-weight: 600;
    }
    
    .timeline-description {
        margin-bottom: 0;
        font-size: 0.75rem;
        color: #6c757d;
    }
    
    pre code {
        font-size: 0.75rem;
        max-height: 200px;
        overflow-y: auto;
    }
</style>
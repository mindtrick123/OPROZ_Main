@model List<PaymentHistory>
@{
    ViewData["Title"] = "Payment History";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<!-- Page Title -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="page-title">Payment History</h1>
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="@Url.Action("Index", "Admin")">Admin</a></li>
                <li class="breadcrumb-item active" aria-current="page">Payment History</li>
            </ol>
        </nav>
    </div>
    <div>
        <button type="button" class="btn btn-outline-success" onclick="exportData()">
            <i class="bi bi-download me-2"></i>Export Data
        </button>
    </div>
</div>

<!-- Statistics Cards -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="card">
            <div class="card-body text-center">
                <i class="bi bi-receipt text-primary fs-2 mb-2"></i>
                <h4 class="card-title mb-0">@ViewBag.TotalCount</h4>
                <p class="card-text text-muted">Total Transactions</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card">
            <div class="card-body text-center">
                <i class="bi bi-check-circle text-success fs-2 mb-2"></i>
                <h4 class="card-title mb-0">@Model.Count(p => p.Status == PaymentStatus.Success)</h4>
                <p class="card-text text-muted">Successful</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card">
            <div class="card-body text-center">
                <i class="bi bi-x-circle text-danger fs-2 mb-2"></i>
                <h4 class="card-title mb-0">@Model.Count(p => p.Status == PaymentStatus.Failed)</h4>
                <p class="card-text text-muted">Failed</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card">
            <div class="card-body text-center">
                <i class="bi bi-currency-dollar text-success fs-2 mb-2"></i>
                @{
                    var totalRevenue = Model.Where(p => p.Status == PaymentStatus.Success).Sum(p => p.FinalAmount);
                }
                <h4 class="card-title mb-0">$@totalRevenue.ToString("N0")</h4>
                <p class="card-text text-muted">Total Revenue</p>
            </div>
        </div>
    </div>
</div>

<!-- Filters -->
<div class="card mb-4">
    <div class="card-body">
        <form method="get" id="filterForm">
            <div class="row g-3">
                <div class="col-md-3">
                    <label for="search" class="form-label">Search</label>
                    <input type="text" class="form-control" id="search" name="search" 
                           value="@ViewBag.Search" placeholder="Search by user, transaction ID...">
                </div>
                <div class="col-md-2">
                    <label for="status" class="form-label">Status</label>
                    <select class="form-select" id="status" name="status">
                        <option value="">All Status</option>
                        <option value="Pending" selected="@(ViewBag.Status?.ToString() == "Pending")">Pending</option>
                        <option value="Success" selected="@(ViewBag.Status?.ToString() == "Success")">Success</option>
                        <option value="Failed" selected="@(ViewBag.Status?.ToString() == "Failed")">Failed</option>
                        <option value="Refunded" selected="@(ViewBag.Status?.ToString() == "Refunded")">Refunded</option>
                        <option value="Cancelled" selected="@(ViewBag.Status?.ToString() == "Cancelled")">Cancelled</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label for="startDate" class="form-label">Start Date</label>
                    <input type="date" class="form-control" id="startDate" name="startDate" value="@ViewBag.StartDate">
                </div>
                <div class="col-md-2">
                    <label for="endDate" class="form-label">End Date</label>
                    <input type="date" class="form-control" id="endDate" name="endDate" value="@ViewBag.EndDate">
                </div>
                <div class="col-md-3">
                    <label class="form-label">&nbsp;</label>
                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-outline-primary">
                            <i class="bi bi-funnel me-1"></i>Filter
                        </button>
                        <a href="@Url.Action("PaymentHistory")" class="btn btn-outline-secondary">
                            <i class="bi bi-x-circle me-1"></i>Clear
                        </a>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Payment History Table -->
<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Payment Transactions</h5>
        <span class="badge bg-primary">Total: @ViewBag.TotalCount transactions</span>
    </div>
    <div class="card-body p-0">
        @if (Model.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>Transaction</th>
                            <th>User & Company</th>
                            <th>Plan & Service</th>
                            <th>Amount</th>
                            <th>Status</th>
                            <th>Date</th>
                            <th class="text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var payment in Model)
                        {
                            <tr>
                                <td>
                                    <div>
                                        <h6 class="mb-1">
                                            <a href="@Url.Action("PaymentDetails", new { id = payment.Id })" 
                                               class="text-decoration-none">#@payment.TransactionId</a>
                                        </h6>
                                        @if (!string.IsNullOrEmpty(payment.RazorpayPaymentId))
                                        {
                                            <small class="text-muted">
                                                <i class="bi bi-credit-card me-1"></i>@payment.RazorpayPaymentId
                                            </small>
                                        }
                                        @if (payment.Method.HasValue)
                                        {
                                            <br><small class="badge bg-light text-dark">@payment.Method</small>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <h6 class="mb-1">@payment.User.FirstName @payment.User.LastName</h6>
                                        <small class="text-muted">@payment.User.Email</small>
                                        @if (payment.Company != null)
                                        {
                                            <br><small class="text-info">
                                                <i class="bi bi-building me-1"></i>@payment.Company.Name
                                            </small>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <h6 class="mb-1">@payment.SubscriptionPlan.Name</h6>
                                        <small class="text-muted">@payment.SubscriptionPlan.Service.Name</small>
                                        @if (payment.Offer != null)
                                        {
                                            <br><small class="badge bg-warning text-dark">
                                                <i class="bi bi-tag me-1"></i>@payment.Offer.Name
                                            </small>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        @if (payment.DiscountAmount.HasValue && payment.DiscountAmount > 0)
                                        {
                                            <small class="text-muted text-decoration-line-through">$@payment.Amount.ToString("N2")</small>
                                            <br>
                                        }
                                        <strong class="text-success">$@payment.FinalAmount.ToString("N2")</strong>
                                        @if (payment.DiscountAmount.HasValue && payment.DiscountAmount > 0)
                                        {
                                            <br><small class="text-warning">
                                                <i class="bi bi-percent me-1"></i>-$@payment.DiscountAmount.Value.ToString("N2")
                                            </small>
                                        }
                                    </div>
                                </td>
                                <td>
                                    @{
                                        var statusBadge = payment.Status switch
                                        {
                                            PaymentStatus.Success => "bg-success",
                                            PaymentStatus.Failed => "bg-danger",
                                            PaymentStatus.Pending => "bg-warning",
                                            PaymentStatus.Refunded => "bg-info",
                                            PaymentStatus.Cancelled => "bg-secondary",
                                            _ => "bg-secondary"
                                        };
                                    }
                                    <span class="badge @statusBadge">@payment.Status</span>
                                    @if (payment.Status == PaymentStatus.Success && payment.SubscriptionStartDate.HasValue && payment.SubscriptionEndDate.HasValue)
                                    {
                                        <br><small class="text-muted">
                                            Valid until @payment.SubscriptionEndDate.Value.ToString("MMM dd, yyyy")
                                        </small>
                                    }
                                </td>
                                <td>
                                    <div>
                                        <strong>@payment.PaymentDate.ToString("MMM dd, yyyy")</strong>
                                        <br><small class="text-muted">@payment.PaymentDate.ToString("hh:mm tt")</small>
                                    </div>
                                </td>
                                <td class="text-end">
                                    <div class="btn-group" role="group">
                                        <a href="@Url.Action("PaymentDetails", new { id = payment.Id })" 
                                           class="btn btn-sm btn-outline-info" title="View Details">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                        @if (payment.Status == PaymentStatus.Success)
                                        {
                                            <button type="button" class="btn btn-sm btn-outline-warning" 
                                                    onclick="initiateRefund(@payment.Id, '@payment.TransactionId')" 
                                                    title="Initiate Refund">
                                                <i class="bi bi-arrow-return-left"></i>
                                            </button>
                                        }
                                        <button type="button" class="btn btn-sm btn-outline-secondary" 
                                                onclick="downloadReceipt(@payment.Id)" title="Download Receipt">
                                            <i class="bi bi-download"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="bi bi-receipt text-muted" style="font-size: 3rem;"></i>
                <h5 class="mt-3 text-muted">No payment records found</h5>
                <p class="text-muted">Try adjusting your search filters or check back later.</p>
            </div>
        }
    </div>
</div>

<!-- Pagination -->
@if (ViewBag.TotalPages > 1)
{
    <nav aria-label="Payment history pagination" class="mt-4">
        <ul class="pagination justify-content-center">
            @if (ViewBag.CurrentPage > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("PaymentHistory", new { page = ViewBag.CurrentPage - 1, search = ViewBag.Search, status = ViewBag.Status, startDate = ViewBag.StartDate, endDate = ViewBag.EndDate })">
                        <i class="bi bi-chevron-left"></i> Previous
                    </a>
                </li>
            }

            @for (int i = Math.Max(1, ViewBag.CurrentPage - 2); i <= Math.Min(ViewBag.TotalPages, ViewBag.CurrentPage + 2); i++)
            {
                <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                    <a class="page-link" href="@Url.Action("PaymentHistory", new { page = i, search = ViewBag.Search, status = ViewBag.Status, startDate = ViewBag.StartDate, endDate = ViewBag.EndDate })">@i</a>
                </li>
            }

            @if (ViewBag.CurrentPage < ViewBag.TotalPages)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("PaymentHistory", new { page = ViewBag.CurrentPage + 1, search = ViewBag.Search, status = ViewBag.Status, startDate = ViewBag.StartDate, endDate = ViewBag.EndDate })">
                        Next <i class="bi bi-chevron-right"></i>
                    </a>
                </li>
            }
        </ul>
    </nav>
}

<!-- Refund Modal -->
<div class="modal fade" id="refundModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-arrow-return-left me-2"></i>Initiate Refund
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    <strong>Warning:</strong> This action will initiate a refund process. This cannot be undone.
                </div>
                <p>Are you sure you want to initiate a refund for transaction <strong id="refundTransactionId"></strong>?</p>
                <div class="mb-3">
                    <label for="refundReason" class="form-label">Refund Reason</label>
                    <textarea id="refundReason" class="form-control" rows="3" placeholder="Please provide a reason for the refund..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-warning" id="confirmRefund">
                    <i class="bi bi-arrow-return-left me-2"></i>Initiate Refund
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentPaymentId = null;

        // Export data
        function exportData() {
            const searchParams = new URLSearchParams(window.location.search);
            searchParams.set('export', 'true');
            window.open(`@Url.Action("PaymentHistory")?${searchParams.toString()}`, '_blank');
        }

        // Initiate refund
        function initiateRefund(paymentId, transactionId) {
            currentPaymentId = paymentId;
            document.getElementById('refundTransactionId').textContent = transactionId;
            document.getElementById('refundReason').value = '';
            
            const modal = new bootstrap.Modal(document.getElementById('refundModal'));
            modal.show();
        }

        // Confirm refund
        document.getElementById('confirmRefund').addEventListener('click', async function() {
            const reason = document.getElementById('refundReason').value.trim();
            
            if (!reason) {
                alert('Please provide a reason for the refund.');
                return;
            }

            if (!currentPaymentId) return;

            showLoading();
            try {
                const response = await fetch(`@Url.Action("InitiateRefund")`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({ 
                        paymentId: currentPaymentId, 
                        reason: reason 
                    })
                });

                const result = await response.json();
                if (result.success) {
                    showAlert('success', result.message);
                    setTimeout(() => location.reload(), 2000);
                } else {
                    showAlert('error', result.message || 'Failed to initiate refund');
                }
            } catch (error) {
                console.error('Error:', error);
                showAlert('error', 'An error occurred while initiating refund');
            } finally {
                hideLoading();
                bootstrap.Modal.getInstance(document.getElementById('refundModal')).hide();
            }
        });

        // Download receipt
        function downloadReceipt(paymentId) {
            window.open(`@Url.Action("DownloadReceipt")?paymentId=${paymentId}`, '_blank');
        }

        // Auto-submit search after typing
        let searchTimeout;
        document.getElementById('search').addEventListener('input', function() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                document.getElementById('filterForm').submit();
            }, 500);
        });

        // Show alert messages
        function showAlert(type, message) {
            const alertHtml = `
                <div class="alert alert-${type === 'error' ? 'danger' : 'success'} alert-dismissible fade show" role="alert">
                    <i class="bi bi-${type === 'error' ? 'exclamation-triangle' : 'check-circle'} me-2"></i>
                    <strong>${type === 'error' ? 'Error!' : 'Success!'}</strong> ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            // Insert at the top of the main content
            const mainContent = document.querySelector('main .admin-content');
            const firstChild = mainContent.firstElementChild;
            const alertDiv = document.createElement('div');
            alertDiv.innerHTML = alertHtml;
            mainContent.insertBefore(alertDiv.firstElementChild, firstChild);
        }

        // Set default date range (last 30 days) if no dates are set
        document.addEventListener('DOMContentLoaded', function() {
            const startDate = document.getElementById('startDate');
            const endDate = document.getElementById('endDate');
            
            if (!startDate.value && !endDate.value) {
                const today = new Date();
                const thirtyDaysAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);
                
                endDate.value = today.toISOString().split('T')[0];
                startDate.value = thirtyDaysAgo.toISOString().split('T')[0];
            }
        });
    </script>
}

<style>
    .table th {
        font-weight: 600;
        color: #495057;
        border-top: none;
    }
    
    .btn-group .btn {
        border-radius: 0.375rem;
        margin-right: 2px;
    }
    
    .btn-group .btn:last-child {
        margin-right: 0;
    }
    
    .badge {
        font-size: 0.75rem;
    }
    
    .text-decoration-line-through {
        text-decoration: line-through !important;
    }
</style>
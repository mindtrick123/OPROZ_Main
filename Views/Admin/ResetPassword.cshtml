@model OPROZ_Main.ViewModels.AdminResetPasswordViewModel
@{
    ViewData["Title"] = "Reset Password";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="page-title-box">
                <h4 class="page-title">Reset User Password</h4>
                <div class="page-title-right">
                    <ol class="breadcrumb m-0">
                        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Admin")">Admin</a></li>
                        <li class="breadcrumb-item"><a href="@Url.Action("Users", "Admin")">Users</a></li>
                        <li class="breadcrumb-item active">Reset Password</li>
                    </ol>
                </div>
            </div>
        </div>
    </div>

    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card">
                <div class="card-body">
                    <div class="text-center mb-4">
                        <div class="avatar-lg mx-auto">
                            <div class="avatar-title bg-warning rounded-circle">
                                <i class="mdi mdi-lock-reset font-24"></i>
                            </div>
                        </div>
                        <h5 class="mt-3 mb-1">Reset Password</h5>
                        <p class="text-muted">Set a new password for <strong>@Model.UserName</strong></p>
                    </div>

                    <form asp-action="ResetPassword" method="post" novalidate>
                        <input asp-for="UserId" type="hidden" />
                        <input asp-for="UserName" type="hidden" />

                        <div class="mb-3">
                            <label asp-for="NewPassword" class="form-label">New Password</label>
                            <div class="input-group">
                                <input asp-for="NewPassword" type="password" class="form-control" placeholder="Enter new password" autocomplete="new-password" />
                                <button type="button" class="btn btn-outline-secondary" onclick="togglePasswordVisibility('NewPassword')">
                                    <i class="mdi mdi-eye" id="NewPasswordIcon"></i>
                                </button>
                            </div>
                            <span asp-validation-for="NewPassword" class="text-danger"></span>
                            <div class="form-text">
                                Password must be at least 8 characters long and contain:
                                <ul class="mt-1 mb-0 small">
                                    <li>At least one uppercase letter</li>
                                    <li>At least one lowercase letter</li>
                                    <li>At least one number</li>
                                    <li>At least one special character</li>
                                </ul>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="ConfirmPassword" class="form-label">Confirm New Password</label>
                            <div class="input-group">
                                <input asp-for="ConfirmPassword" type="password" class="form-control" placeholder="Confirm new password" autocomplete="new-password" />
                                <button type="button" class="btn btn-outline-secondary" onclick="togglePasswordVisibility('ConfirmPassword')">
                                    <i class="mdi mdi-eye" id="ConfirmPasswordIcon"></i>
                                </button>
                            </div>
                            <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
                        </div>

                        <!-- Password Strength Indicator -->
                        <div class="mb-3">
                            <label class="form-label">Password Strength</label>
                            <div class="password-strength">
                                <div class="progress" style="height: 8px;">
                                    <div class="progress-bar" id="passwordStrengthBar" role="progressbar" style="width: 0%"></div>
                                </div>
                                <small id="passwordStrengthText" class="form-text text-muted">Enter a password to see strength</small>
                            </div>
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input" id="forcePasswordChange">
                                <label class="form-check-label" for="forcePasswordChange">
                                    Force user to change password on next login
                                </label>
                            </div>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-warning">
                                <i class="mdi mdi-lock-reset"></i> Reset Password
                            </button>
                            <a href="@Url.Action("UserDetails", "Admin", new { id = Model.UserId })" class="btn btn-secondary">
                                <i class="mdi mdi-arrow-left"></i> Back to User Details
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Security Notice -->
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card border-danger">
                <div class="card-body">
                    <h6 class="card-title text-danger">
                        <i class="mdi mdi-alert"></i> Security Notice
                    </h6>
                    <ul class="mb-0 small">
                        <li>This action will reset the user's password immediately</li>
                        <li>The user will need to use the new password to log in</li>
                        <li>Consider notifying the user about the password change</li>
                        <li>This action will be logged in the audit trail</li>
                        <li>The user will be forced to log out of all sessions</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    
    <script>
        function togglePasswordVisibility(fieldName) {
            const passwordField = document.getElementById(fieldName);
            const icon = document.getElementById(fieldName + 'Icon');
            
            if (passwordField.type === 'password') {
                passwordField.type = 'text';
                icon.className = 'mdi mdi-eye-off';
            } else {
                passwordField.type = 'password';
                icon.className = 'mdi mdi-eye';
            }
        }

        function checkPasswordStrength(password) {
            let strength = 0;
            let feedback = [];

            // Length check
            if (password.length >= 8) {
                strength += 20;
            } else {
                feedback.push('at least 8 characters');
            }

            // Uppercase check
            if (/[A-Z]/.test(password)) {
                strength += 20;
            } else {
                feedback.push('uppercase letter');
            }

            // Lowercase check
            if (/[a-z]/.test(password)) {
                strength += 20;
            } else {
                feedback.push('lowercase letter');
            }

            // Number check
            if (/[0-9]/.test(password)) {
                strength += 20;
            } else {
                feedback.push('number');
            }

            // Special character check
            if (/[^A-Za-z0-9]/.test(password)) {
                strength += 20;
            } else {
                feedback.push('special character');
            }

            return { strength, feedback };
        }

        function updatePasswordStrength() {
            const password = document.getElementById('NewPassword').value;
            const strengthBar = document.getElementById('passwordStrengthBar');
            const strengthText = document.getElementById('passwordStrengthText');

            if (!password) {
                strengthBar.style.width = '0%';
                strengthBar.className = 'progress-bar';
                strengthText.textContent = 'Enter a password to see strength';
                strengthText.className = 'form-text text-muted';
                return;
            }

            const { strength, feedback } = checkPasswordStrength(password);

            // Update progress bar
            strengthBar.style.width = strength + '%';

            // Update color and text based on strength
            if (strength < 40) {
                strengthBar.className = 'progress-bar bg-danger';
                strengthText.textContent = 'Weak - Missing: ' + feedback.join(', ');
                strengthText.className = 'form-text text-danger';
            } else if (strength < 80) {
                strengthBar.className = 'progress-bar bg-warning';
                strengthText.textContent = 'Fair - Missing: ' + feedback.join(', ');
                strengthText.className = 'form-text text-warning';
            } else if (strength < 100) {
                strengthBar.className = 'progress-bar bg-info';
                strengthText.textContent = 'Good - Missing: ' + feedback.join(', ');
                strengthText.className = 'form-text text-info';
            } else {
                strengthBar.className = 'progress-bar bg-success';
                strengthText.textContent = 'Strong password!';
                strengthText.className = 'form-text text-success';
            }
        }

        // Real-time password strength checking
        document.getElementById('NewPassword').addEventListener('input', updatePasswordStrength);

        // Real-time password confirmation checking
        document.getElementById('ConfirmPassword').addEventListener('input', function() {
            const newPassword = document.getElementById('NewPassword').value;
            const confirmPassword = this.value;
            
            if (confirmPassword && newPassword !== confirmPassword) {
                this.setCustomValidity('Passwords do not match');
                this.classList.add('is-invalid');
            } else {
                this.setCustomValidity('');
                this.classList.remove('is-invalid');
                if (confirmPassword) {
                    this.classList.add('is-valid');
                }
            }
        });

        // Form submission validation
        document.querySelector('form').addEventListener('submit', function(e) {
            const newPassword = document.getElementById('NewPassword').value;
            const confirmPassword = document.getElementById('ConfirmPassword').value;
            
            // Check password strength
            const { strength } = checkPasswordStrength(newPassword);
            if (strength < 60) {
                e.preventDefault();
                showAlert('warning', 'Please choose a stronger password that meets all requirements.');
                return;
            }

            // Check password match
            if (newPassword !== confirmPassword) {
                e.preventDefault();
                showAlert('danger', 'Passwords do not match.');
                return;
            }

            // Show confirmation dialog
            if (!confirm('Are you sure you want to reset this user\'s password? This action cannot be undone.')) {
                e.preventDefault();
            }
        });

        function showAlert(type, message) {
            const alertHtml = `
                <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;
            document.querySelector('.container-fluid').insertAdjacentHTML('afterbegin', alertHtml);
        }

        // Generate random password function
        function generateRandomPassword() {
            const length = 12;
            const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@@#$%^&*";
            let password = "";
            
            // Ensure at least one character from each required category
            password += "ABCDEFGHIJKLMNOPQRSTUVWXYZ"[Math.floor(Math.random() * 26)];
            password += "abcdefghijklmnopqrstuvwxyz"[Math.floor(Math.random() * 26)];
            password += "0123456789"[Math.floor(Math.random() * 10)];
            password += "!@@#$%^&*"[Math.floor(Math.random() * 8)];
            
            // Fill the rest randomly
            for (let i = password.length; i < length; i++) {
                password += charset[Math.floor(Math.random() * charset.length)];
            }
            
            // Shuffle the password
            return password.split('').sort(() => 0.5 - Math.random()).join('');
        }

        // Add generate password button after page load
        document.addEventListener('DOMContentLoaded', function() {
            const newPasswordGroup = document.querySelector('input[name="NewPassword"]').closest('.input-group');
            const generateBtn = document.createElement('button');
            generateBtn.type = 'button';
            generateBtn.className = 'btn btn-outline-info';
            generateBtn.innerHTML = '<i class="mdi mdi-refresh"></i>';
            generateBtn.title = 'Generate random password';
            generateBtn.onclick = function() {
                const newPassword = generateRandomPassword();
                document.getElementById('NewPassword').value = newPassword;
                document.getElementById('ConfirmPassword').value = newPassword;
                updatePasswordStrength();
                
                // Show generated password temporarily
                showAlert('info', `Generated password: ${newPassword} (copy this before proceeding)`);
            };
            
            newPasswordGroup.appendChild(generateBtn);
        });
    </script>
}

<style>
    .page-title-box {
        padding: 20px 0;
    }

    .card {
        border: none;
        box-shadow: 0 0.75rem 1.5rem rgba(18, 38, 63, 0.03);
        margin-bottom: 24px;
    }

    .avatar-lg {
        height: 4rem;
        width: 4rem;
    }

    .avatar-title {
        align-items: center;
        background-color: #6c757d;
        color: #fff;
        display: flex;
        font-weight: 500;
        height: 100%;
        justify-content: center;
        width: 100%;
    }

    .font-24 {
        font-size: 24px;
    }

    .password-strength {
        margin-top: 0.5rem;
    }

    .progress {
        background-color: #e9ecef;
    }

    .input-group .btn {
        border-left: 0;
    }

    .is-invalid {
        border-color: #dc3545;
    }

    .is-valid {
        border-color: #198754;
    }

    .border-danger {
        border-color: #dc3545 !important;
    }

    .card.border-danger .card-body {
        border-left: 4px solid #dc3545;
    }
</style>
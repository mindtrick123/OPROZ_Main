@model List<OPROZ_Main.Models.SubscriptionPlan>
@{
    ViewData["Title"] = "Subscription Plans";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<!-- Page Header -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="page-title">Subscription Plans</h1>
        <p class="page-subtitle">Manage subscription plans and pricing</p>
    </div>
    <div>
        <a href="@Url.Action("CreateSubscriptionPlan")" class="btn btn-primary">
            <i class="bi bi-plus-lg me-2"></i>Create New Plan
        </a>
    </div>
</div>

<!-- Breadcrumb -->
<nav aria-label="breadcrumb" class="mb-4">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="@Url.Action("Index")">Dashboard</a></li>
        <li class="breadcrumb-item"><a href="#">Master Setup</a></li>
        <li class="breadcrumb-item active">Subscription Plans</li>
    </ol>
</nav>

<!-- Filter Bar -->
<div class="card filter-bar">
    <div class="card-body">
        <form method="get" class="row g-3">
            <div class="col-md-3">
                <label class="form-label">Search</label>
                <input type="text" class="form-control" name="search" value="@ViewBag.Search" placeholder="Search plans...">
            </div>
            <div class="col-md-2">
                <label class="form-label">Service</label>
                <select name="serviceId" class="form-select">
                    <option value="">All Services</option>
                    @foreach (var service in ViewBag.Services)
                    {
                        <option value="@service.Id" selected="@(ViewBag.ServiceId == service.Id)">@service.Name</option>
                    }
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label">Plan Type</label>
                <select name="planType" class="form-select">
                    <option value="">All Types</option>
                    @foreach (var type in Enum.GetValues<OPROZ_Main.Models.PlanType>())
                    {
                        <option value="@type" selected="@(ViewBag.PlanType?.ToString() == type.ToString())">@type</option>
                    }
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label">Duration</label>
                <select name="duration" class="form-select">
                    <option value="">All Durations</option>
                    @foreach (var duration in Enum.GetValues<OPROZ_Main.Models.PlanDuration>())
                    {
                        <option value="@duration" selected="@(ViewBag.Duration?.ToString() == duration.ToString())">@duration</option>
                    }
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label">Status</label>
                <select name="isActive" class="form-select">
                    <option value="">All Status</option>
                    <option value="true" selected="@(ViewBag.IsActive == true)">Active</option>
                    <option value="false" selected="@(ViewBag.IsActive == false)">Inactive</option>
                </select>
            </div>
            <div class="col-md-1">
                <label class="form-label">&nbsp;</label>
                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-outline-primary">
                        <i class="bi bi-search"></i>
                    </button>
                    <a href="@Url.Action("SubscriptionPlans")" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-clockwise"></i>
                    </a>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Results Summary -->
<div class="d-flex justify-content-between align-items-center mb-3">
    <div class="text-muted">
        Showing @((ViewBag.CurrentPage - 1) * 10 + 1) - @(Math.Min(ViewBag.CurrentPage * 10, ViewBag.TotalCount)) of @ViewBag.TotalCount subscription plans
    </div>
</div>

<!-- Subscription Plans Table -->
<div class="card">
    <div class="card-body p-0">
        @if (Model.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead>
                        <tr>
                            <th>Plan Name</th>
                            <th>Service</th>
                            <th>Type</th>
                            <th>Duration</th>
                            <th>Price</th>
                            <th>Users/Storage</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var plan in Model)
                        {
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div>
                                            <div class="fw-bold">@plan.Name</div>
                                            @if (!string.IsNullOrEmpty(plan.Description))
                                            {
                                                <small class="text-muted">@(plan.Description.Length > 50 ? plan.Description.Substring(0, 50) + "..." : plan.Description)</small>
                                            }
                                        </div>
                                        @if (plan.IsPopular)
                                        {
                                            <span class="badge bg-warning text-dark ms-2">Popular</span>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <span class="badge bg-info">@plan.Service.Name</span>
                                </td>
                                <td>
                                    <span class="badge bg-secondary">@plan.Type</span>
                                </td>
                                <td>@plan.Duration</td>
                                <td>
                                    <span class="fw-bold text-success">$@plan.Price.ToString("N2")</span>
                                </td>
                                <td>
                                    <small class="text-muted">
                                        @plan.MaxUsers users<br>
                                        @(plan.MaxStorage / 1024)GB storage
                                    </small>
                                </td>
                                <td>
                                    <span class="badge @(plan.IsActive ? "bg-success" : "bg-secondary")">
                                        @(plan.IsActive ? "Active" : "Inactive")
                                    </span>
                                </td>
                                <td>
                                    <div class="btn-group-actions">
                                        <a href="@Url.Action("SubscriptionPlanDetails", new { id = plan.Id })" 
                                           class="btn btn-sm btn-outline-info" title="View Details">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                        <a href="@Url.Action("EditSubscriptionPlan", new { id = plan.Id })" 
                                           class="btn btn-sm btn-outline-primary" title="Edit">
                                            <i class="bi bi-pencil"></i>
                                        </a>
                                        <button type="button" class="btn btn-sm btn-outline-warning" 
                                                onclick="togglePopular(@plan.Id)" title="Toggle Popular">
                                            <i class="bi bi-star@(plan.IsPopular ? "-fill" : "")"></i>
                                        </button>
                                        <button type="button" class="btn btn-sm @(plan.IsActive ? "btn-outline-secondary" : "btn-outline-success")" 
                                                onclick="toggleStatus(@plan.Id)" title="Toggle Status">
                                            <i class="bi bi-@(plan.IsActive ? "pause" : "play")"></i>
                                        </button>
                                        <button type="button" class="btn btn-sm btn-outline-danger" 
                                                onclick="deletePlan(@plan.Id)" title="Delete">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-state-icon">
                    <i class="bi bi-credit-card"></i>
                </div>
                <h3 class="empty-state-title">No Subscription Plans Found</h3>
                <p class="empty-state-text">
                    @if (!string.IsNullOrEmpty(ViewBag.Search) || ViewBag.IsActive != null || ViewBag.PlanType != null)
                    {
                        <text>No subscription plans match your current filters. Try adjusting your search criteria.</text>
                    }
                    else
                    {
                        <text>Get started by creating your first subscription plan.</text>
                    }
                </p>
                @if (string.IsNullOrEmpty(ViewBag.Search) && ViewBag.IsActive == null && ViewBag.PlanType == null)
                {
                    <a href="@Url.Action("CreateSubscriptionPlan")" class="btn btn-primary">
                        <i class="bi bi-plus-lg me-2"></i>Create First Plan
                    </a>
                }
                else
                {
                    <a href="@Url.Action("SubscriptionPlans")" class="btn btn-outline-primary">
                        <i class="bi bi-arrow-clockwise me-2"></i>Clear Filters
                    </a>
                }
            </div>
        }
    </div>
</div>

<!-- Pagination -->
@if (ViewBag.TotalPages > 1)
{
    <nav aria-label="Page navigation" class="mt-4">
        <ul class="pagination">
            <li class="page-item @(ViewBag.CurrentPage == 1 ? "disabled" : "")">
                <a class="page-link" href="@Url.Action("SubscriptionPlans", new { page = ViewBag.CurrentPage - 1, search = ViewBag.Search, isActive = ViewBag.IsActive, planType = ViewBag.PlanType, duration = ViewBag.Duration, serviceId = ViewBag.ServiceId })">
                    <i class="bi bi-chevron-left"></i>
                </a>
            </li>

            @for (int i = Math.Max(1, ViewBag.CurrentPage - 2); i <= Math.Min(ViewBag.TotalPages, ViewBag.CurrentPage + 2); i++)
            {
                <li class="page-item @(ViewBag.CurrentPage == i ? "active" : "")">
                    <a class="page-link" href="@Url.Action("SubscriptionPlans", new { page = i, search = ViewBag.Search, isActive = ViewBag.IsActive, planType = ViewBag.PlanType, duration = ViewBag.Duration, serviceId = ViewBag.ServiceId })">@i</a>
                </li>
            }

            <li class="page-item @(ViewBag.CurrentPage == ViewBag.TotalPages ? "disabled" : "")">
                <a class="page-link" href="@Url.Action("SubscriptionPlans", new { page = ViewBag.CurrentPage + 1, search = ViewBag.Search, isActive = ViewBag.IsActive, planType = ViewBag.PlanType, duration = ViewBag.Duration, serviceId = ViewBag.ServiceId })">
                    <i class="bi bi-chevron-right"></i>
                </a>
            </li>
        </ul>
    </nav>
}

@section Scripts {
    <script>
        function toggleStatus(id) {
            if (confirm('Are you sure you want to change the status of this subscription plan?')) {
                showLoading();
                fetch('@Url.Action("ToggleSubscriptionPlanStatus")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': '@Html.AntiForgeryToken()'
                    },
                    body: 'id=' + id
                })
                .then(response => response.json())
                .then(data => {
                    hideLoading();
                    if (data.success) {
                        location.reload();
                    } else {
                        alert(data.message || 'An error occurred');
                    }
                })
                .catch(error => {
                    hideLoading();
                    alert('An error occurred: ' + error.message);
                });
            }
        }

        function togglePopular(id) {
            if (confirm('Are you sure you want to change the popular status of this subscription plan?')) {
                showLoading();
                fetch('@Url.Action("ToggleSubscriptionPlanPopular")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': '@Html.AntiForgeryToken()'
                    },
                    body: 'id=' + id
                })
                .then(response => response.json())
                .then(data => {
                    hideLoading();
                    if (data.success) {
                        location.reload();
                    } else {
                        alert(data.message || 'An error occurred');
                    }
                })
                .catch(error => {
                    hideLoading();
                    alert('An error occurred: ' + error.message);
                });
            }
        }

        function deletePlan(id) {
            if (confirm('Are you sure you want to delete this subscription plan? This action cannot be undone.')) {
                showLoading();
                fetch('@Url.Action("DeleteSubscriptionPlan")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': '@Html.AntiForgeryToken()'
                    },
                    body: 'id=' + id
                })
                .then(response => response.json())
                .then(data => {
                    hideLoading();
                    if (data.success) {
                        location.reload();
                    } else {
                        alert(data.message || 'An error occurred');
                    }
                })
                .catch(error => {
                    hideLoading();
                    alert('An error occurred: ' + error.message);
                });
            }
        }
    </script>
}